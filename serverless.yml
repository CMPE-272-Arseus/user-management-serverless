org: gabrielphotoprintstore
app: photoprintstore
service: user-management-service
package:
  patterns:
    - '!terraform/**'

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  region: us-west-2
  httpApi:
    cors:
      allowedOrigins:
        - "*"
      allowedHeaders:
        - Content-Type
        - Authorization
      allowedMethods:
        - GET
        - POST
        - PATCH
        - DELETE
  environment:
    DYNAMODB_TABLE: ${file(config.yml):dynamodb_table}
    # SOCKET_SERVICE_URL: ${file(./${opt:stage}.config.yml):socket_service_url}

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:BatchGet*"
        - "dynamodb:DescribeStream"
        - "dynamodb:DescribeTable"
        - "dynamodb:Get*"
        - "dynamodb:Query"
        - "dynamodb:Scan"
        - "dynamodb:BatchWrite*"
        - "dynamodb:CreateTable"
        - "dynamodb:Delete*"
        - "dynamodb:Update*"
        - "dynamodb:PutItem"
      Resource:
        - ${file(./config.yml):dynamodb_table_arn}
    - Effect: "Allow"
      Action:
        - "cognito-idp:AdminUpdateUserAttributes"
      Resource:
        - ${file(./config.yml):user_pool_arn}

functions:
  hello:
    name: hello
    handler: handler.hello
    events:
      - httpApi:
          path: /hello
          method: get
  postConfirmationRegisterUserID:
    name: postConfirmationRegisterUserID
    handler: handler.postConfirmationRegisterUserID
  updateUserInformation:
    name: updateUserInformation
    handler: handler.updateUserInformation
    events:
      - httpApi:
          path: /{userId}
          method: patch
  getUserInformation:
    name: getUserInformation
    handler: handler.getUserInformation
    events:
      - httpApi:
          path: /{userId}
          method: get



  # createUser:
  #   name: createUser
  #   handler: handler.createUser
  #   events:
  #     - httpApi:
  #         path: /
  #         method: post

  # createSession:
  #   name: ${opt:stage}-createSession
  #   handler: handler.createSession
  #   events:
  #     - httpApi:
  #         path: /sessions
  #         method: post
  # getSession:
  #   name: ${opt:stage}-getSession
  #   handler: handler.getSession
  #   events:
  #     - httpApi:
  #         path: /sessions/{sessionId}
  #         method: get
  #         request:
  #           parameters:
  #             paths:
  #               sessionId: true
  # closeSession:
  #   name: ${opt:stage}-closeSession
  #   handler: handler.closeSession
  #   events:
  #     - httpApi:
  #         path: /sessions/{sessionId}
  #         method: delete
  #         request:
  #           parameters:
  #             paths:
  #               sessionId: true
